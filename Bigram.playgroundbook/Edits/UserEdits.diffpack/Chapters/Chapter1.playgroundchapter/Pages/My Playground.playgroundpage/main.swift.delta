<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>import Foundation
import SwiftUI

/**
 An implementation of the Makemore Bigram model from
 Andrej Karpathy's video: https://youtu.be/PaCmpygFfXo
 */

// names.txt
let fileURL = #fileLiteral(resourceName: "names.txt")

let contents = try! String(contentsOf: fileURL)

let words = contents.components(separatedBy: .newlines)

words.count
words[0..&lt;10]

let min = words.map( { $0.count }).min()
min
let max = words.map { $0.count }.max()
max

// 1D Bigram

var b: [String : Int] = [:]
for w in words {
    let chs = ["&lt;S&gt;"] + w.map { String($0) } + ["&lt;E&gt;"]
    for (ch1, ch2) in zip(chs, chs.dropFirst()) {
        let bigram = ch1 + "-" + ch2 // Swift doesn't support tuple keys
        b[bigram, default: 0] += 1
    }
}

let sorted = b.map {($0, $1)}.sorted(by: { $0.1 &gt; $1.1 })

sorted[0]

// 2D Bigram

let chars = ["."] + Array(Set(words.joined().map {String($0)})).sorted()

var N = [[Int]](repeating: [Int](repeating: 0, count: chars.count), count: chars.count)

let stoi: [String:Int] = chars.enumerated().reduce(into: [:]) { (result, element) in
    let (i, s) = element
    result[s] = i
}

for w in words {
    let chs = "." + w + "."
    for (ch1, ch2) in zip(chs, chs.dropFirst()) {
        let ix1 = stoi[String(ch1)]!
        let ix2 = stoi[String(ch2)]!
        N[ix1][ix2] += 1
    }
}

func multinomial(_ p: [Double]) -&gt; Int {
    let r = Double.random(in: 0..&lt;1)
    var acc = Double(0)
    for i in 0..&lt;p.count {
        acc += p[i]
        if r &lt; acc {
            return i
        }
    }
    return p.count - 1
}

// Generate names
for _ in 0..&lt;20 { 
    var ix = 0
    var out = ""
    while true {
        let row = N[ix]
        let sum = Double(row.reduce(0, +))
        let p = row.map { Double($0) / sum }
        ix = multinomial(p)
        out += chars[ix]
        if ix == 0 {
            break
        }
    }
    print(out)
}
</string>
			<key>ModifiedRange</key>
			<string>{0, 1859}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{0, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
